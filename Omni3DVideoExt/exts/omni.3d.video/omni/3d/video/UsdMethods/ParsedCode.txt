
    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        


    def camera_zoom_in(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom in animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """



    def camera_zoom_out(extension, zoom_ratio: float = 2.0, duration: float = 3, start: float = None):
        """
        Create a camera zoom out animation

        Args:
            zoom_ratio (float): the ratio of the zoom
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_pan(extension, pan_distance: Gf.Vec2f, duration: float = 3, start: float = None):
        """
        Create a camera pan horizontal or vertical animation
        """



    def camera_roll(extension, roll_angle: float, duration: float = 3, start: float = None):
        """
        
        """


    def camera_pull_in(extension, pull_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull in out animation

        Args:
            pull_distance (float): distance the camera will pull in
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def camera_push_out(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera pull away out animation

        Args:
            push_distance (float): distance the camera will pull away
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

    
    def camera_push_up(extension, push_distance: float, duration: float = 3, start: float = None):
        """
        Create a camera translate up animation

        Args:
            push_distance (float): distance the camera will translate up
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """


    def prim_translate(extension, direction: str, prim_path: str, distance: float, duration: float = 3, start: float = 0):
        """
        Translate a prim up, down, left, right, forward, or backward

        Args:
            direction (str): The direction in which the translate will happen (up, down, left, right, forward, backward)
            prim_path (str): The path of the prim that will be translated
            distance (float): The distance in which the animation will be translated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            



    def prim_rotate(extension, rotation_axis: str, prim_path: str, roll_angle: float, duration: float = 3, start: float = None):
        """
        Rotate a prim along the X, Y, or Z axis

        Args:
            rotation_axis (str): The axis in which the prim will be rotated (X, Y, or Z)
            prim_path (str): The path of the prim that will be translated
            roll_angle (float): The angle at which the prim will be rotated
            duration (float): the duration of the animation in seoconds
            start (float): the start time of the animation in seconds
        """

        def sanitize_for_usd(name: str) -> str:
            


    def keyframe(stage, camera, prim_path: str, attribute_path: str, time: float, value: float) -> None:
        """
        Keyframe an attribute of a prim at a time with a value

        Args:
            prim_path (str): the path of the prim to keyframe
            attribute (str): the attribute to keyframe
            time (float): the time to keyframe
            value (float): the value to keyframe
        """


    def create_scale_animation(stage, prim_path: str, duration: float, scale_ratio: float = 2.0) -> None:
        """
        Create a scale animation for a prim

        Args:
            prim_path (str): the path of the prim to animate
            duration (float): the duration of the animation
            scale_ratio (float): the scale ratio
        """


    def place_lighting(extension, light_name: str, intensity: float = 1000, 
                       color_red: float = 1, color_green: float = 0, color_blue: float = 0,
                       position_x: float = 0, position_y: float = 200, position_z: float = 500, 
                       rotation_angle_x: float = 0, rotation_angle_y: float = 0, rotation_angle_z: float = 0, exposure: float = 20):
        """
        Create a lighting and place it at a certain position with a specified color and rotation
        
        Args:
            light_name (str): The name of the light
            intensity (float): The intensity at which the light shines
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            position_x (float): X component of the position of the light
            position_y (float): Y component of the position of the light
            position_z (float): Z component of the position of the light
            rotation_angle_x (float): X component of rotation angle of the light
            rotation_angle_y (float): Y component of rotation angle of the light
            rotation_angle_z (float): Z component of rotation angle of the light
        """

    def background(extension, color_red: float = 1, color_green: float = 0.5, color_blue: float = 0.5,
                   light_path: str = "/background", use_hdri: bool = False):
        """
        Create a background and place it around the prim
        
        Args:
            color_red (float): Red component of the rgb light value for light color
            color_green (float): Green component of the rgb light value for light color
            color_blue (float): Blue component of the rgb light value for light color
            light_path (str): The path of the light
            use_hdri (bool): Use hdri background or not
        """

    def import_asset(extension, prompt) -> str:
        """
        Pull the object from the AWS bucket and load it into the scene
        Args:
            prompt (str): the object the user wants to load
        Return:
            str: the path of the object
        """

        def add_int_reference(prim: Usd.Prim, ref_target_path: Sdf.Path) -> None:
                


        def add_ext_reference(prim: Usd.Prim, ref_asset_path: str, ref_target_path: Sdf.Path) -> None:
                

        
        def add_reference(stage, local_path, prompt):

            

        def get_texture_path_from_s3(bucket_name, base_path):
            


        def sanitize_for_filesystem(name: str) -> str:
            


        def sanitize_for_usd(name: str) -> str:
            


def add_material(prim_path: str, diffuse_color: Tuple[float]) -> None:
    """
    Add a material to a prim with basic color
    
    Args:
        prim_path (str): the path of the prim to create
        diffuse_color (Tuple[float]): a tuple of RGB floats suggestion the color of the material
    """






def generate_texture(prim_path: str, text: str = "A chubby orange cat riding through space, digital art") -> None:
    """
    Generate a texture for a prim
    
    Args:
        prim_path (str): the path of the prim to create
        text (str): the description of the texture
    """



def apply_texture_from_file(prim_path: str, texture_path: str) -> None:
    """
    Apply a texture from an existing JPG file to a prim.
    
    Args:
        prim_path (str): the path of the prim to apply the texture to
        texture_path (str): the path to the JPG file to use as texture
    """

    def createMaterialAndTexture(material):
        

